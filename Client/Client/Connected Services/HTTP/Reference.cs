//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.HTTP {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="HTTP.ICompilerService")]
    public interface ICompilerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompilerService/CompileCPP", ReplyAction="http://tempuri.org/ICompilerService/CompileCPPResponse")]
        string CompileCPP(string code, string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompilerService/CompileCPP", ReplyAction="http://tempuri.org/ICompilerService/CompileCPPResponse")]
        System.Threading.Tasks.Task<string> CompileCPPAsync(string code, string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompilerService/CompileCPPWithInput", ReplyAction="http://tempuri.org/ICompilerService/CompileCPPWithInputResponse")]
        string CompileCPPWithInput(string code, string input, string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompilerService/CompileCPPWithInput", ReplyAction="http://tempuri.org/ICompilerService/CompileCPPWithInputResponse")]
        System.Threading.Tasks.Task<string> CompileCPPWithInputAsync(string code, string input, string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompilerService/CompileC", ReplyAction="http://tempuri.org/ICompilerService/CompileCResponse")]
        string CompileC(string code, string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompilerService/CompileC", ReplyAction="http://tempuri.org/ICompilerService/CompileCResponse")]
        System.Threading.Tasks.Task<string> CompileCAsync(string code, string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompilerService/CompileCWithInput", ReplyAction="http://tempuri.org/ICompilerService/CompileCWithInputResponse")]
        string CompileCWithInput(string code, string input, string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompilerService/CompileCWithInput", ReplyAction="http://tempuri.org/ICompilerService/CompileCWithInputResponse")]
        System.Threading.Tasks.Task<string> CompileCWithInputAsync(string code, string input, string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompilerService/CompilePython", ReplyAction="http://tempuri.org/ICompilerService/CompilePythonResponse")]
        string CompilePython(string code, string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompilerService/CompilePython", ReplyAction="http://tempuri.org/ICompilerService/CompilePythonResponse")]
        System.Threading.Tasks.Task<string> CompilePythonAsync(string code, string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompilerService/CompilePythonWithInput", ReplyAction="http://tempuri.org/ICompilerService/CompilePythonWithInputResponse")]
        string CompilePythonWithInput(string code, string input, string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompilerService/CompilePythonWithInput", ReplyAction="http://tempuri.org/ICompilerService/CompilePythonWithInputResponse")]
        System.Threading.Tasks.Task<string> CompilePythonWithInputAsync(string code, string input, string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompilerService/CompileJava", ReplyAction="http://tempuri.org/ICompilerService/CompileJavaResponse")]
        string CompileJava(string code, string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompilerService/CompileJava", ReplyAction="http://tempuri.org/ICompilerService/CompileJavaResponse")]
        System.Threading.Tasks.Task<string> CompileJavaAsync(string code, string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompilerService/CompileJavaWithInput", ReplyAction="http://tempuri.org/ICompilerService/CompileJavaWithInputResponse")]
        string CompileJavaWithInput(string code, string input, string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompilerService/CompileJavaWithInput", ReplyAction="http://tempuri.org/ICompilerService/CompileJavaWithInputResponse")]
        System.Threading.Tasks.Task<string> CompileJavaWithInputAsync(string code, string input, string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompilerService/ShowAllCode", ReplyAction="http://tempuri.org/ICompilerService/ShowAllCodeResponse")]
        string ShowAllCode(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompilerService/ShowAllCode", ReplyAction="http://tempuri.org/ICompilerService/ShowAllCodeResponse")]
        System.Threading.Tasks.Task<string> ShowAllCodeAsync(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompilerService/GetCode", ReplyAction="http://tempuri.org/ICompilerService/GetCodeResponse")]
        string GetCode(string CodeID, string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompilerService/GetCode", ReplyAction="http://tempuri.org/ICompilerService/GetCodeResponse")]
        System.Threading.Tasks.Task<string> GetCodeAsync(string CodeID, string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompilerService/DeleteCode", ReplyAction="http://tempuri.org/ICompilerService/DeleteCodeResponse")]
        string DeleteCode(string CodeID, string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompilerService/DeleteCode", ReplyAction="http://tempuri.org/ICompilerService/DeleteCodeResponse")]
        System.Threading.Tasks.Task<string> DeleteCodeAsync(string CodeID, string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompilerService/UpdateCode", ReplyAction="http://tempuri.org/ICompilerService/UpdateCodeResponse")]
        string UpdateCode(string CodeID, string code, string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompilerService/UpdateCode", ReplyAction="http://tempuri.org/ICompilerService/UpdateCodeResponse")]
        System.Threading.Tasks.Task<string> UpdateCodeAsync(string CodeID, string code, string key);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICompilerServiceChannel : Client.HTTP.ICompilerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CompilerServiceClient : System.ServiceModel.ClientBase<Client.HTTP.ICompilerService>, Client.HTTP.ICompilerService {
        
        public CompilerServiceClient() {
        }
        
        public CompilerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CompilerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CompilerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CompilerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string CompileCPP(string code, string key) {
            return base.Channel.CompileCPP(code, key);
        }
        
        public System.Threading.Tasks.Task<string> CompileCPPAsync(string code, string key) {
            return base.Channel.CompileCPPAsync(code, key);
        }
        
        public string CompileCPPWithInput(string code, string input, string key) {
            return base.Channel.CompileCPPWithInput(code, input, key);
        }
        
        public System.Threading.Tasks.Task<string> CompileCPPWithInputAsync(string code, string input, string key) {
            return base.Channel.CompileCPPWithInputAsync(code, input, key);
        }
        
        public string CompileC(string code, string key) {
            return base.Channel.CompileC(code, key);
        }
        
        public System.Threading.Tasks.Task<string> CompileCAsync(string code, string key) {
            return base.Channel.CompileCAsync(code, key);
        }
        
        public string CompileCWithInput(string code, string input, string key) {
            return base.Channel.CompileCWithInput(code, input, key);
        }
        
        public System.Threading.Tasks.Task<string> CompileCWithInputAsync(string code, string input, string key) {
            return base.Channel.CompileCWithInputAsync(code, input, key);
        }
        
        public string CompilePython(string code, string key) {
            return base.Channel.CompilePython(code, key);
        }
        
        public System.Threading.Tasks.Task<string> CompilePythonAsync(string code, string key) {
            return base.Channel.CompilePythonAsync(code, key);
        }
        
        public string CompilePythonWithInput(string code, string input, string key) {
            return base.Channel.CompilePythonWithInput(code, input, key);
        }
        
        public System.Threading.Tasks.Task<string> CompilePythonWithInputAsync(string code, string input, string key) {
            return base.Channel.CompilePythonWithInputAsync(code, input, key);
        }
        
        public string CompileJava(string code, string key) {
            return base.Channel.CompileJava(code, key);
        }
        
        public System.Threading.Tasks.Task<string> CompileJavaAsync(string code, string key) {
            return base.Channel.CompileJavaAsync(code, key);
        }
        
        public string CompileJavaWithInput(string code, string input, string key) {
            return base.Channel.CompileJavaWithInput(code, input, key);
        }
        
        public System.Threading.Tasks.Task<string> CompileJavaWithInputAsync(string code, string input, string key) {
            return base.Channel.CompileJavaWithInputAsync(code, input, key);
        }
        
        public string ShowAllCode(string key) {
            return base.Channel.ShowAllCode(key);
        }
        
        public System.Threading.Tasks.Task<string> ShowAllCodeAsync(string key) {
            return base.Channel.ShowAllCodeAsync(key);
        }
        
        public string GetCode(string CodeID, string key) {
            return base.Channel.GetCode(CodeID, key);
        }
        
        public System.Threading.Tasks.Task<string> GetCodeAsync(string CodeID, string key) {
            return base.Channel.GetCodeAsync(CodeID, key);
        }
        
        public string DeleteCode(string CodeID, string key) {
            return base.Channel.DeleteCode(CodeID, key);
        }
        
        public System.Threading.Tasks.Task<string> DeleteCodeAsync(string CodeID, string key) {
            return base.Channel.DeleteCodeAsync(CodeID, key);
        }
        
        public string UpdateCode(string CodeID, string code, string key) {
            return base.Channel.UpdateCode(CodeID, code, key);
        }
        
        public System.Threading.Tasks.Task<string> UpdateCodeAsync(string CodeID, string code, string key) {
            return base.Channel.UpdateCodeAsync(CodeID, code, key);
        }
    }
}
